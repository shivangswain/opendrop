{"version":3,"sources":["types/ActionType.ts","types/TransferState.ts","components/Header.tsx","config.ts","screens/Home.tsx","components/QrCodeSection.tsx","actions/transfers.ts","components/TransferIcon.tsx","animationSettings.ts","components/Transfer.tsx","components/TransferList.tsx","components/NetworkTile.tsx","components/Network.tsx","components/TransfersSection.tsx","components/IncompatibleBrowser.tsx","modals/ClipboardModal.tsx","screens/Welcome.tsx","actions/state.ts","modals/WelcomeModal.tsx","screens/Transfers.tsx","components/Status.tsx","App.tsx","actions/websocket.ts","socketMiddleware.ts","reducers/index.ts","types/MessageType.ts","sagas/transferSendFile.ts","sagas/transferReceiveFile.ts","sagas/index.ts","store.ts","index.tsx"],"names":["ActionType","TransferState","Header","className","to","wsServer","process","REACT_APP_SERVER","window","location","hostname","Router","REACT_APP_USE_BROWSER_ROUTER","BrowserRouter","HashRouter","Home","networkName","useSelector","state","connected","clientId","suggestedName","history","useHistory","nameCharacterSet","useEffect","currentNetworkName","Array","fill","map","charAt","Math","floor","random","length","join","replace","shareSupported","navigator","share","QrCodeSection","href","useState","copied","setCopied","onCopy","useCallback","onShare","title","url","value","text","onClick","addTransferAction","transfer","type","ADD_TRANSFER","updateTransferAction","transferUpdate","UPDATE_TRANSFER","removeTransferAction","transferId","REMOVE_TRANSFER","acceptTransferAction","ACCEPT_TRANSFER","rejectTransferAction","REJECT_TRANSFER","cancelTransferAction","CANCEL_TRANSFER","createTransferAction","file","CREATE_TRANSFER","addIceCandidateAction","data","ADD_ICE_CANDIDATE","states","INCOMING","OUTGOING","CONNECTING","CONNECTED","IN_PROGRESS","COMPLETE","FAILED","TransferIcon","targetClient","network","find","client","placement","overlay","transitionName","style","backgroundColor","clientColor","receiving","stateIcon","preview","src","alt","fileName","fileType","startsWith","includes","transitionProps","stiffness","damping","animationPropsOpacity","initial","opacity","animate","exit","transition","animationPropsRotation","scale","rotate","positionTransition","animationPropsSlide","x","cancellableStates","shorterFileName","name","fileNameLength","replacementCharacter","dotIndex","lastIndexOf","half","extension","substr","Transfer","dispatch","useDispatch","setText","acceptTransfer","rejectTransfer","cancelTransfer","dismissTransfer","blobUrl","fetch","then","res","motion","li","filesize","fileSize","download","AnimatePresence","div","progress","max","round","speed","TransferList","transfers","store","acceptAll","filter","forEach","rejectAll","cancelAll","dismissAll","NetworkTile","onSelect","publicKey","onDrop","files","useDropzone","getRootProps","getInputProps","isDragActive","event","preventDefault","accept","tabIndex","Network","span","TransfersSection","noticeText","noticeUrl","IncompatibleBrowser","ClipboardModal","dismissClipboard","Welcome","setConnectedAction","SET_CONNECTED","setNetworkNameAction","SET_NETWORK_NAME","WelcomeModal","dismissWelcome","DISMISS_WELCOME","Transfers","welcomed","clipboardFiles","setClipboardFiles","useParams","setHref","incompatibleBrowser","setIncompatibleBrowser","origin","pathname","hash","onPaste","e","target","tagName","clipboardData","items","item","getAsFile","push","getAsString","str","File","document","addEventListener","removeEventListener","Status","App","path","sendMessageAction","message","PREPARE_MESSAGE","messageAction","WS_MESSAGE","socketMiddleware","socket","TypeSocket","maxRetries","retryOnClose","retryTime","on","WS_CONNECTED","WS_DISCONNECTED","next","action","WS_SEND_MESSAGE","readyState","send","WS_CONNECT","connect","initialState","localStorage","getItem","rtcConfiguration","error","maxSize","applicationState","MessageType","ActionMessageActionType","newState","SET_ERROR","DISMISS_ERROR","SET_RTC_CONFIGURATION","iceServers","SET_CLIENT_ID","SET_CLIENT_COLOR","SET_MAX_SIZE","SET_SUGGESTED_NAME","SET_KEY_PAIR","keyPairValue","privateKey","SET_NETWORK","clientIds","SET_NOTICE","notice","SET_REMOTE_DESCRIPTION","peerConnection","connectionState","setRemoteDescription","catch","addIceCandidate","sort","a","b","transferSendFile","actionMessage","put","select","filteredTransfers","connection","RTCPeerConnection","createOffer","offer","setLocalDescription","nextRtcMessage","RTC_DESCRIPTION","targetId","localDescription","sdp","candidate","candidateMessage","RTC_CANDIDATE","channel","createDataChannel","binaryType","timestamp","Date","getTime","complete","onFailure","bufferSize","sctp","maxMessageSize","fileReader","FileReader","offset","nextSlice","currentOffset","slice","readAsArrayBuffer","buffer","result","close","byteLength","size","time","bufferedAmount","bufferedAmountLowThreshold","iceConnectionState","transferReceiveFile","rtcMessage","onComplete","blob","Blob","URL","createObjectURL","element","createElement","setAttribute","display","click","call","createAnswer","answer","prepareMessage","setName","disconnected","createTransfer","updateNotificationCount","createKeys","root","msg","WELCOME","TRANSFER","ACTION","NETWORK","PING","ENCRYPTED","configuration","id","color","undefined","CANCEL","REJECT","ACCEPT","clients","pongMessage","JSON","RSA","decryptString","payload","json","parse","secure","encryptString","stringify","NAME","fromImage","imtool","thumbnail","toDataURL","uuid","model","setItem","incomingTransfers","randomKeyPair","keyPair","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","reducers","applyMiddleware","run","sagas","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1f71de02.chunk.js","sourcesContent":["export enum ActionType {\n\t// Application state\n\tSET_ERROR = 'SET_ERROR',\n\tSET_CONNECTED = 'SET_CONNECTED',\n\tSET_RTC_CONFIGURATION = 'SET_RTC_CONFIGURATION',\n\tSET_NETWORK_NAME = 'SET_NETWORK_NAME',\n\tSET_CLIENT_ID = 'SET_CLIENT_ID',\n\tSET_CLIENT_COLOR = 'SET_CLIENT_COLOR',\n\tSET_SUGGESTED_NAME = 'SET_SUGGESTED_NAME',\n\tSET_NETWORK = 'SET_NETWORK',\n\tSET_MAX_SIZE = 'SET_MAX_SIZE',\n\tSET_NOTICE = 'SET_NOTICE',\n\tSET_KEY_PAIR = 'SET_KEY_PAIR',\n\n\t// Dismiss\n\tDISMISS_ERROR = 'DISMISS_ERROR',\n\tDISMISS_WELCOME = 'DISMISS_WELCOME',\n\n\t// Web Sockets\n\tPREPARE_MESSAGE = 'PREPARE_MESSAGE',\n\tWS_SEND_MESSAGE = 'WS_SEND_MESSAGE',\n\tWS_MESSAGE = 'WS_MESSAGE',\n\tWS_CONNECTED = 'WS_CONNECTED',\n\tWS_DISCONNECTED = 'WS_DISCONNECTED',\n\tWS_CONNECT = 'WS_CONNECT',\n\n\t// Transfers\n\tADD_TRANSFER = 'ADD_TRANSFER',\n\tREMOVE_TRANSFER = 'REMOVE_TRANSFER',\n\tUPDATE_TRANSFER = 'UPDATE_TRANSFER',\n\n\t// Incoming transfers\n\tACCEPT_TRANSFER = 'ACCEPT_TRANSFER',\n\tREJECT_TRANSFER = 'REJECT_TRANSFER',\n\n\t// Outgoing transfers\n\tCREATE_TRANSFER = 'CREATE_TRANSFER',\n\tCANCEL_TRANSFER = 'CANCEL_TRANSFER',\n\n\t// Active transfers\n\tADD_ICE_CANDIDATE = 'ADD_ICE_CANDIDATE',\n\tSET_LOCAL_DESCRIPTION = 'SET_LOCAL_DESCRIPTION',\n\tSET_REMOTE_DESCRIPTION = 'SET_REMOTE_DESCRIPTION',\n}\n","export enum TransferState {\n  INCOMING,\n  OUTGOING,\n  CONNECTING,\n  CONNECTED,\n  IN_PROGRESS,\n  COMPLETE,\n  FAILED,\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header: React.FC = () => {\n\treturn (\n\t\t<header>\n\t\t\t<nav className=\"menu\">\n\t\t\t\t<h1>\n\t\t\t\t\t<Link to=\"/\" className=\"logo\">\n\t\t\t\t\t\tOpenDrop\n\t\t\t\t\t</Link>\n\t\t\t\t</h1>\n\t\t\t</nav>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import { BrowserRouter, HashRouter } from 'react-router-dom';\n\nexport const wsServer = process.env.REACT_APP_SERVER || 'ws://' + window.location.hostname + ':5000/ws';\nexport const nameLength = 5;\nexport const Router: any = process.env.REACT_APP_USE_BROWSER_ROUTER ? BrowserRouter : HashRouter;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { StateType } from '../reducers';\nimport { nameLength } from '../config';\n\nconst Home: React.FC = () => {\n\tconst networkName = useSelector((state: StateType) => state.networkName);\n\tconst connected = useSelector((state: StateType) => state.connected);\n\tconst clientId = useSelector((state: StateType) => state.clientId);\n\tconst suggestedName = useSelector((state: StateType) => state.suggestedName);\n\n\tconst history = useHistory();\n\tconst nameCharacterSet = 'ABCDEFGHIJKLMNOPQRTUVWXYZ';\n\n\tuseEffect(() => {\n\t\tconst currentNetworkName =\n\t\t\tnetworkName ||\n\t\t\tsuggestedName ||\n\t\t\tnew Array(nameLength)\n\t\t\t\t.fill('')\n\t\t\t\t.map(() => nameCharacterSet.charAt(Math.floor(Math.random() * nameCharacterSet.length)))\n\t\t\t\t.join('');\n\t\tif (connected && clientId) {\n\t\t\thistory.replace('/' + currentNetworkName);\n\t\t}\n\t}, [connected, networkName, history, clientId, suggestedName]);\n\n\treturn <section className=\"center\">Loading...</section>;\n};\n\nexport default Home;\n","import React, { useState, useCallback } from 'react';\nimport QrCode from 'qrcode.react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { FaShare, FaCopy } from 'react-icons/fa';\n\ninterface QrCodeSectionProps {\n\thref: string;\n}\n\nconst shareSupported = !!(navigator as any).share;\n\nconst QrCodeSection: React.FC<QrCodeSectionProps> = ({ href }) => {\n\tconst [copied, setCopied] = useState(false);\n\n\tconst onCopy = useCallback(() => setCopied(true), [setCopied]);\n\tconst onShare = useCallback(() => {\n\t\t(navigator as any).share({\n\t\t\ttitle: 'OpenDrop - transfer files',\n\t\t\turl: href,\n\t\t});\n\t}, [href]);\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Connect</h2>\n\t\t\t<div className=\"qrcode subsection\">\n\t\t\t\t<div className=\"info\">\n\t\t\t\t\t<>\n\t\t\t\t\t\tTo connect to your network and start copying files, scan the QR code below, or open the URL on\n\t\t\t\t\t\tanother device.\n\t\t\t\t\t</>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<QrCode value={href} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<pre>{href}</pre>\n\t\t\t\t\t<div className=\"buttons\">\n\t\t\t\t\t\t<CopyToClipboard text={href} onCopy={onCopy}>\n\t\t\t\t\t\t\t<button>\n\t\t\t\t\t\t\t\t<FaCopy /> {copied ? 'Copied' : 'Copy'}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</CopyToClipboard>\n\t\t\t\t\t\t{shareSupported && (\n\t\t\t\t\t\t\t<button onClick={onShare}>\n\t\t\t\t\t\t\t\t<FaShare /> Share\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default QrCodeSection;\n","import {\n  ActionModel,\n  TransferModel,\n  TransferUpdateModel,\n} from '../types/Models';\nimport { ActionType } from '../types/ActionType';\n\nexport function addTransferAction(transfer: TransferModel): ActionModel {\n  return {\n    type: ActionType.ADD_TRANSFER,\n    value: transfer,\n  };\n}\n\nexport function updateTransferAction(\n  transferUpdate: TransferUpdateModel\n): ActionModel {\n  return {\n    type: ActionType.UPDATE_TRANSFER,\n    value: transferUpdate,\n  };\n}\n\nexport function removeTransferAction(transferId: string): ActionModel {\n  return {\n    type: ActionType.REMOVE_TRANSFER,\n    value: transferId,\n  };\n}\n\nexport function acceptTransferAction(transferId: string): ActionModel {\n  return {\n    type: ActionType.ACCEPT_TRANSFER,\n    value: transferId,\n  };\n}\n\nexport function rejectTransferAction(transferId: string): ActionModel {\n  return {\n    type: ActionType.REJECT_TRANSFER,\n    value: transferId,\n  };\n}\n\nexport function cancelTransferAction(transferId: string): ActionModel {\n  return {\n    type: ActionType.CANCEL_TRANSFER,\n    value: transferId,\n  };\n}\n\nexport function createTransferAction(\n  file: File,\n  clientId: string\n): ActionModel {\n  return {\n    type: ActionType.CREATE_TRANSFER,\n    value: {\n      file,\n      clientId,\n    },\n  };\n}\n\nexport function addIceCandidateAction(\n  transferId: string,\n  data: any\n): ActionModel {\n  return {\n    type: ActionType.ADD_ICE_CANDIDATE,\n    value: {\n      transferId,\n      data,\n    },\n  };\n}\n\nexport function setLocalDescriptionAction(\n  transferId: string,\n  data: any\n): ActionModel {\n  return {\n    type: ActionType.SET_LOCAL_DESCRIPTION,\n    value: {\n      transferId,\n      data,\n    },\n  };\n}\n\nexport function setRemoteDescriptionAction(\n  transferId: string,\n  data: any\n): ActionModel {\n  return {\n    type: ActionType.SET_REMOTE_DESCRIPTION,\n    value: {\n      transferId,\n      data,\n    },\n  };\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Tooltip from 'rc-tooltip';\nimport {\n  FaFile,\n  FaFileAlt,\n  FaFileVideo,\n  FaFileAudio,\n  FaFileImage,\n  FaFileArchive,\n  FaTimes,\n  FaArrowDown,\n  FaArrowUp,\n  FaAngleDoubleDown,\n  FaCheck,\n  FaAngleDoubleUp,\n  FaHourglassHalf,\n  FaHourglassEnd,\n} from 'react-icons/fa';\n\nimport { TransferModel } from '../types/Models';\nimport { StateType } from '../reducers';\nimport { TransferState } from '../types/TransferState';\n\nconst states = {\n  [TransferState.INCOMING]: 'Incoming',\n  [TransferState.OUTGOING]: 'Outgoing',\n  [TransferState.CONNECTING]: 'Connecting...',\n  [TransferState.CONNECTED]: 'Connected!',\n  [TransferState.IN_PROGRESS]: 'In progress...',\n  [TransferState.COMPLETE]: 'Complete!',\n  [TransferState.FAILED]: 'Failed!',\n};\n\ninterface TransferIconProps {\n  transfer: TransferModel;\n}\n\nconst TransferIcon: React.FC<TransferIconProps> = ({ transfer }) => {\n  const network = useSelector((state: StateType) => state.network);\n  const targetClient = network.find(\n    client => client.clientId === transfer.clientId\n  );\n\n  const typeIcon = (type: string) => {\n    if (type.startsWith('text/') || type.includes('pdf')) {\n      return <FaFileAlt />;\n    } else if (\n      type.includes('zip') ||\n      type.includes('rar') ||\n      type.includes('7z') ||\n      type.includes('compress')\n    ) {\n      return <FaFileArchive />;\n    } else if (type.startsWith('image/')) {\n      return <FaFileImage />;\n    } else if (type.startsWith('video/')) {\n      return <FaFileVideo />;\n    } else if (type.startsWith('audio/')) {\n      return <FaFileAudio />;\n    } else if (type.startsWith('application/')) {\n      return <FaFileAlt />;\n    } else {\n      return <FaFile />;\n    }\n  };\n\n  const stateIcon = (state: TransferState, receiving: boolean) => {\n    switch (state) {\n      case TransferState.INCOMING:\n        return <FaArrowDown />;\n      case TransferState.OUTGOING:\n        return <FaArrowUp />;\n      case TransferState.FAILED:\n        return <FaTimes />;\n      case TransferState.IN_PROGRESS:\n        if (receiving) {\n          return <FaAngleDoubleDown />;\n        } else {\n          return <FaAngleDoubleUp />;\n        }\n      case TransferState.CONNECTING:\n        return <FaHourglassHalf />;\n      case TransferState.CONNECTED:\n        return <FaHourglassEnd />;\n      case TransferState.COMPLETE:\n        return <FaCheck />;\n    }\n  };\n\n  return (\n    <div className=\"transfer-icon\">\n      {targetClient ? (\n        <Tooltip\n          placement=\"top\"\n          overlay={states[transfer.state]}\n          transitionName=\"rc-tooltip-fade\"\n        >\n          <div\n            className=\"network-tile target-tile\"\n            style={{\n              backgroundColor: targetClient.clientColor,\n            }}\n            aria-label={'Transfer state: ' + states[transfer.state]}\n          >\n            {stateIcon(transfer.state, transfer.receiving)}\n          </div>\n        </Tooltip>\n      ) : null}\n      {transfer.preview ? (\n        <img src={transfer.preview} alt={'Preview: ' + transfer.fileName} />\n      ) : (\n        typeIcon(transfer.fileType)\n      )}\n    </div>\n  );\n};\n\nexport default TransferIcon;\n","const transitionProps = {\n  type: 'spring',\n  stiffness: 200,\n  damping: 20,\n};\n\nexport const animationPropsOpacity = {\n  initial: { opacity: 0 },\n  animate: { opacity: 1 },\n  exit: { opacity: 0 },\n  transition: transitionProps,\n};\n\nexport const animationPropsRotation = {\n  initial: { scale: 0 },\n  animate: { rotate: 360, scale: 1 },\n  exit: { scale: 0 },\n  transition: transitionProps,\n  positionTransition: true,\n};\n\nexport const animationPropsSlide = {\n  initial: { x: -100, opacity: 0 },\n  animate: { x: 0, opacity: 1 },\n  exit: { x: -100, opacity: 0 },\n  transition: transitionProps,\n  positionTransition: true,\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Tooltip from 'rc-tooltip';\nimport filesize from 'filesize';\n\nimport {\n  removeTransferAction,\n  cancelTransferAction,\n  rejectTransferAction,\n  acceptTransferAction,\n} from '../actions/transfers';\nimport { TransferModel } from '../types/Models';\nimport { TransferState } from '../types/TransferState';\nimport TransferIcon from './TransferIcon';\nimport { animationPropsSlide } from '../animationSettings';\n\nexport const cancellableStates = [\n  TransferState.IN_PROGRESS,\n  TransferState.CONNECTING,\n  TransferState.CONNECTED,\n  TransferState.OUTGOING,\n];\n\ninterface TransferProps {\n  transfer: TransferModel;\n}\n\nfunction shorterFileName(\n  name: string,\n  fileNameLength = 20,\n  replacementCharacter = '…'\n) {\n  const dotIndex = name.lastIndexOf('.');\n  const half = Math.floor(fileNameLength / 2);\n\n  if (dotIndex !== -1) {\n    const extension = name.substr(dotIndex);\n    const fileName = name.substr(0, dotIndex);\n\n    if (fileName.length > fileNameLength) {\n      return (\n        fileName.substr(0, half) +\n        replacementCharacter +\n        fileName.substr(fileName.length - (half + 1)) +\n        extension\n      );\n    }\n  } else if (name.length > 24) {\n    return (\n      name.substr(0, half) +\n      replacementCharacter +\n      name.substr(name.length - (half + 1))\n    );\n  }\n\n  return name;\n}\n\nconst Transfer: React.FC<TransferProps> = ({ transfer }) => {\n  const dispatch = useDispatch();\n  const [copied, setCopied] = useState(false);\n  const [text, setText] = useState('');\n\n  const acceptTransfer = useCallback(\n    () => dispatch(acceptTransferAction(transfer.transferId)),\n    [transfer, dispatch]\n  );\n  const rejectTransfer = useCallback(\n    () => dispatch(rejectTransferAction(transfer.transferId)),\n    [transfer, dispatch]\n  );\n  const cancelTransfer = useCallback(\n    () => dispatch(cancelTransferAction(transfer.transferId)),\n    [transfer, dispatch]\n  );\n  const dismissTransfer = useCallback(\n    () => dispatch(removeTransferAction(transfer.transferId)),\n    [transfer, dispatch]\n  );\n\n  useEffect(() => {\n    setCopied(false);\n  }, [transfer.blobUrl, setCopied]);\n\n  useEffect(() => {\n    if (transfer.fileType === 'text/plain' && transfer.blobUrl) {\n      fetch(transfer.blobUrl)\n        .then(res => res.text())\n        .then(text => setText(text));\n    }\n  }, [transfer]);\n\n  const onCopy = useCallback(() => setCopied(true), [setCopied]);\n\n  return (\n    <motion.li\n      className=\"subsection info-grid\"\n      {...animationPropsSlide}\n      aria-label=\"Transfer\"\n    >\n      <div className=\"image\">\n        <TransferIcon transfer={transfer} />\n      </div>\n      <div className=\"info\">\n        <div>\n          <Tooltip\n            placement=\"top\"\n            overlay={transfer.fileName}\n            transitionName=\"rc-tooltip-fade\"\n          >\n            <div className=\"metadata\">\n              {shorterFileName(transfer.fileName)}\n              <span> ({filesize(transfer.fileSize)})</span>\n            </div>\n          </Tooltip>\n          <div className=\"metadata\">\n            {transfer.state === TransferState.FAILED ? 'Failed!' : ''}\n          </div>\n        </div>\n        <div className=\"actions\">\n          <div className=\"buttons\">\n            {transfer.state === TransferState.COMPLETE && transfer.blobUrl ? (\n              <>\n                <a\n                  className=\"button\"\n                  href={transfer.blobUrl}\n                  download={transfer.fileName}\n                >\n                  Redownload\n                </a>\n                {transfer.fileType === 'text/plain' ? (\n                  <CopyToClipboard text={text} onCopy={onCopy}>\n                    <button>{copied ? 'Copied' : 'Copy to clipboard'}</button>\n                  </CopyToClipboard>\n                ) : null}\n              </>\n            ) : null}\n            {transfer.state === TransferState.COMPLETE ||\n            transfer.state === TransferState.FAILED ? (\n              <button onClick={dismissTransfer}>Dismiss</button>\n            ) : null}\n            {transfer.state === TransferState.INCOMING ? (\n              <>\n                <button onClick={acceptTransfer}>Accept</button>\n                <button onClick={rejectTransfer}>Reject</button>\n              </>\n            ) : null}\n            {cancellableStates.includes(transfer.state) ? (\n              <button onClick={cancelTransfer}>Cancel</button>\n            ) : null}\n          </div>\n          <AnimatePresence>\n            {transfer.state === TransferState.IN_PROGRESS ? (\n              <motion.div className=\"progress\" {...animationPropsSlide}>\n                <progress value={transfer.progress} max={1} />\n                <div>{Math.round(transfer.speed / 1000)} kB/s</div>\n              </motion.div>\n            ) : null}\n          </AnimatePresence>\n        </div>\n      </div>\n    </motion.li>\n  );\n};\n\nexport default Transfer;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnimatePresence } from 'framer-motion';\n\nimport Transfer, { cancellableStates } from './Transfer';\nimport { StateType } from '../reducers';\nimport {\n  acceptTransferAction,\n  cancelTransferAction,\n  rejectTransferAction,\n  removeTransferAction,\n} from '../actions/transfers';\nimport { TransferState } from '../types/TransferState';\n\nconst TransferList: React.FC = () => {\n  const transfers = useSelector((store: StateType) => store.transfers);\n  const dispatch = useDispatch();\n\n  const acceptAll = useCallback(() => {\n    transfers\n      .filter(transfer => transfer.state === TransferState.INCOMING)\n      .forEach(transfer => dispatch(acceptTransferAction(transfer.transferId)));\n  }, [transfers, dispatch]);\n  const rejectAll = useCallback(() => {\n    transfers\n      .filter(transfer => transfer.state === TransferState.INCOMING)\n      .forEach(transfer => dispatch(rejectTransferAction(transfer.transferId)));\n  }, [transfers, dispatch]);\n  const cancelAll = useCallback(() => {\n    transfers\n      .filter(transfer => cancellableStates.includes(transfer.state))\n      .forEach(transfer => dispatch(cancelTransferAction(transfer.transferId)));\n  }, [transfers, dispatch]);\n  const dismissAll = useCallback(() => {\n    transfers\n      .filter(\n        transfer =>\n          transfer.state === TransferState.COMPLETE ||\n          transfer.state === TransferState.FAILED\n      )\n      .forEach(transfer => dispatch(removeTransferAction(transfer.transferId)));\n  }, [transfers, dispatch]);\n\n  return (\n    <>\n      {transfers.length !== 0 && (\n        <h2>\n          Transfers\n          <div className=\"buttons\">\n            {!!transfers.find(\n              transfer => transfer.state === TransferState.INCOMING\n            ) && <button onClick={acceptAll}>Accept all</button>}\n            {!!transfers.find(\n              transfer => transfer.state === TransferState.INCOMING\n            ) && <button onClick={rejectAll}>Reject all</button>}\n            {!!transfers.find(\n              transfer =>\n                transfer.state === TransferState.COMPLETE ||\n                transfer.state === TransferState.FAILED\n            ) && <button onClick={dismissAll}>Dismiss all</button>}\n            {!!transfers.find(transfer =>\n              cancellableStates.includes(transfer.state)\n            ) && <button onClick={cancelAll}>Cancel all</button>}\n          </div>\n        </h2>\n      )}\n      <ul className=\"center queue\">\n        <AnimatePresence>\n          {transfers.map(transfer => (\n            <Transfer key={transfer.transferId} transfer={transfer} />\n          ))}\n        </AnimatePresence>\n      </ul>\n    </>\n  );\n};\n\nexport default TransferList;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useDropzone } from 'react-dropzone';\nimport { FaLock, FaPlus } from 'react-icons/fa';\nimport { motion } from 'framer-motion';\n\nimport { ClientModel } from '../types/Models';\nimport { createTransferAction } from '../actions/transfers';\nimport { animationPropsRotation } from '../animationSettings';\nimport { StateType } from '../reducers';\n\ninterface NetworkTileProps {\n  client: ClientModel;\n  onSelect?: (clientId: string) => void;\n}\n\nconst NetworkTile: React.FC<NetworkTileProps> = ({ client, onSelect }) => {\n  const dispatch = useDispatch();\n  const publicKey = useSelector((state: StateType) => state.publicKey);\n\n  const onDrop = useCallback(\n    (files: File[]) => {\n      for (let file of files) {\n        dispatch(createTransferAction(file, client.clientId));\n      }\n    },\n    [dispatch, client.clientId]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n  });\n\n  const preventClick = (event: React.MouseEvent) => {\n    event.preventDefault();\n  };\n\n  const onClick = useCallback(() => {\n    onSelect(client.clientId);\n  }, [client, onSelect]);\n\n  return (\n    <motion.div {...animationPropsRotation} onClick={onSelect ? onClick : null}>\n      {onSelect ? (\n        <div\n          className=\"network-tile\"\n          style={{\n            backgroundColor: client.clientColor,\n          }}\n        >\n          <FaPlus />\n          {!!publicKey && !!client.publicKey && (\n            <div className=\"secure\">\n              <FaLock />\n            </div>\n          )}\n        </div>\n      ) : (\n        <div\n          {...getRootProps()}\n          className={'network-tile ' + (isDragActive ? 'active' : '')}\n          style={{\n            backgroundColor: client.clientColor,\n          }}\n        >\n          <label onClick={preventClick}>\n            <input\n              {...getInputProps({\n                style: {},\n              })}\n              accept={'*'}\n              tabIndex={1}\n            />\n            Click on this area to start a transfer.\n          </label>\n          <FaPlus />\n          {client.publicKey && (\n            <div className=\"secure\">\n              <FaLock />\n            </div>\n          )}\n        </div>\n      )}\n    </motion.div>\n  );\n};\n\nexport default NetworkTile;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nimport { StateType } from '../reducers';\nimport NetworkTile from './NetworkTile';\nimport { animationPropsOpacity } from '../animationSettings';\n\ninterface NetworkProps {\n  onSelect?: (clientId: string) => void;\n}\n\nconst Network: React.FC<NetworkProps> = ({ onSelect }) => {\n  const network = useSelector((store: StateType) => store.network);\n\n  return (\n    <div className={'subsection ' + (network.length > 0 ? 'network' : '')}>\n      <AnimatePresence>\n        {network.length > 0 ? (\n          <AnimatePresence>\n            {network.map(client => (\n              <NetworkTile\n                key={client.clientId}\n                client={client}\n                onSelect={onSelect}\n              />\n            ))}\n          </AnimatePresence>\n        ) : (\n          <motion.span {...animationPropsOpacity}>\n            <div>Nobody is connected to your network.</div>\n            <div>Open this website elsewhere to connect.</div>\n          </motion.span>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default Network;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { StateType } from '../reducers';\nimport TransferList from './TransferList';\nimport Network from './Network';\n\nconst TransfersSection: React.FC = () => {\n\tconst clientColor = useSelector((store: StateType) => store.clientColor);\n\tconst noticeText = useSelector((store: StateType) => store.noticeText);\n\tconst noticeUrl = useSelector((store: StateType) => store.noticeUrl);\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Devices</h2>\n\t\t\t{!!noticeText && (\n\t\t\t\t<div className=\"subsection notice\">{noticeUrl ? <a href={noticeUrl}>{noticeText}</a> : noticeText}</div>\n\t\t\t)}\n\t\t\t<div className=\"subsection info-grid\">\n\t\t\t\t<div className=\"image\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"network-tile\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tbackgroundColor: clientColor,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tYou\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"info\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<strong>This is your tile.</strong>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tUnder this section you will see other tiles like this one. Drag and drop your files or click on\n\t\t\t\t\t\tthem to initiate a file transfer.\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Network />\n\t\t\t<TransferList />\n\t\t</div>\n\t);\n};\n\nexport default TransfersSection;\n","import React from 'react';\n\nconst IncompatibleBrowser: React.FC = () => {\n  return (\n    <>\n      <h2>Incompatible browser</h2>\n      <div className=\"subsection warning\">\n        <p>\n          Your browser does not support the technologies required for the app to\n          work. You can still try to use the app, but it's not guaranteed it'll\n          work.\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default IncompatibleBrowser;\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { motion } from 'framer-motion';\n\nimport Network from '../components/Network';\nimport { createTransferAction } from '../actions/transfers';\nimport { animationPropsOpacity } from '../animationSettings';\n\ninterface ClipboardModalProps {\n  files: File[];\n  dismissClipboard: () => void;\n}\n\nconst ClipboardModal: React.FC<ClipboardModalProps> = ({\n  files,\n  dismissClipboard,\n}) => {\n  const dispatch = useDispatch();\n\n  const onSelect = useCallback(\n    (clientId: string) => {\n      for (let file of files) {\n        dispatch(createTransferAction(file, clientId));\n      }\n\n      dismissClipboard();\n    },\n    [dispatch, files, dismissClipboard]\n  );\n\n  return (\n    <motion.div className=\"modal\" {...animationPropsOpacity}>\n      <div>\n        <section>\n          <h2>Send clipboard contents</h2>\n          <Network onSelect={onSelect} />\n        </section>\n        <div className=\"center\">\n          <button onClick={dismissClipboard}>Cancel</button>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default ClipboardModal;\n","import React from 'react';\n\nconst Welcome: React.FC = () => {\n\treturn (\n\t\t<section>\n\t\t\t<h2>Welcome</h2>\n\t\t\t<div className=\"subsection left\">\n\t\t\t\t<p>Welcome to OpenDrop! Let me explain what this website is.</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis website allows you to copy files over the network (LAN if both devices are on the same local\n\t\t\t\t\tnetwork and support WebRTC, otherwise the traffic goes through a TURN relay). Originally I've\n\t\t\t\t\tcreated this project to avoid logging into my e-mail on computers I don't own or having to type long\n\t\t\t\t\tURLs by hand. I hope it is as useful for you as it is for me. :)\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tYou can start a file transfer in a few easy steps:\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>Open this website on one device (you're here right now!)</li>\n\t\t\t\t\t\t<li>Scan the QR code or open the URL from the \"Invite\" section on another device.</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\tDrag and drop your files onto a tile (any tile that isn't marked as \"You\", you can also\n\t\t\t\t\t\t\tclick on a tile to open a file selection dialog).\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>Accept the transfer on another device.</li>\n\t\t\t\t\t</ol>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tClicking the \"Continue\" button below this notice will save data (welcomed = '1') into your browser's\n\t\t\t\t\tlocal storage. This data will be used to avoid showing you this notice in future.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</section>\n\t);\n};\n\nexport default Welcome;\n","import { RSA } from 'matcrypt';\n\nimport { ActionModel, ClientModel } from '../types/Models';\nimport { ActionType } from '../types/ActionType';\n\nexport function setErrorAction(error: string): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_ERROR,\n\t\tvalue: error,\n\t};\n}\n\nexport function setConnectedAction(connected: boolean): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_CONNECTED,\n\t\tvalue: connected,\n\t};\n}\n\nexport function setRtcConfigurationAction(configuration: RTCConfiguration): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_RTC_CONFIGURATION,\n\t\tvalue: configuration,\n\t};\n}\n\nexport function setNetworkNameAction(name: string): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_NETWORK_NAME,\n\t\tvalue: name,\n\t};\n}\n\nexport function setSuggestedNameAction(name: string): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_SUGGESTED_NAME,\n\t\tvalue: name,\n\t};\n}\n\nexport function setClientIdAction(id: string): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_CLIENT_ID,\n\t\tvalue: id,\n\t};\n}\n\nexport function setClientColorAction(color: string): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_CLIENT_COLOR,\n\t\tvalue: color,\n\t};\n}\n\nexport function setNetworkAction(network: ClientModel[]): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_NETWORK,\n\t\tvalue: network,\n\t};\n}\n\nexport function setMaxSizeAction(maxSize: number): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_MAX_SIZE,\n\t\tvalue: maxSize,\n\t};\n}\n\nexport function setNoticeAction(noticeText?: string, noticeUrl?: string): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_NOTICE,\n\t\tvalue: {\n\t\t\tnoticeText,\n\t\t\tnoticeUrl,\n\t\t},\n\t};\n}\n\nexport function setKeyPairAction(publicKey: string, privateKey: string): ActionModel {\n\treturn {\n\t\ttype: ActionType.SET_KEY_PAIR,\n\t\tvalue: {\n\t\t\tpublicKey,\n\t\t\tprivateKey,\n\t\t} as RSA.KeyPair,\n\t};\n}\n\nexport function dismissWelcomeAction(): ActionModel {\n\treturn {\n\t\ttype: ActionType.DISMISS_WELCOME,\n\t\tvalue: null,\n\t};\n}\n\nexport function dismissErrorAction(): ActionModel {\n\treturn {\n\t\ttype: ActionType.DISMISS_ERROR,\n\t\tvalue: null,\n\t};\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { motion } from 'framer-motion';\n\nimport Welcome from '../screens/Welcome';\nimport { dismissWelcomeAction } from '../actions/state';\nimport { animationPropsOpacity } from '../animationSettings';\n\nconst WelcomeModal: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const dismissWelcome = useCallback(() => {\n    dispatch(dismissWelcomeAction());\n  }, [dispatch]);\n\n  return (\n    <motion.div className=\"modal\" {...animationPropsOpacity}>\n      <div>\n        <Welcome />\n        <div className=\"center\">\n          <button onClick={dismissWelcome}>Continue</button>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default WelcomeModal;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnimatePresence } from 'framer-motion';\n\nimport { StateType } from '../reducers';\nimport QrCodeSection from '../components/QrCodeSection';\nimport TransfersSection from '../components/TransfersSection';\nimport IncompatibleBrowser from '../components/IncompatibleBrowser';\nimport ClipboardModal from '../modals/ClipboardModal';\nimport WelcomeModal from '../modals/WelcomeModal';\nimport { setNetworkNameAction } from '../actions/state';\n\nconst Transfers: React.FC = () => {\n  const dispatch = useDispatch();\n  const welcomed = useSelector((state: StateType) => state.welcomed);\n  const [clipboardFiles, setClipboardFiles] = useState<File[]>([]);\n  const { networkName } = useParams<{ networkName: string }>();\n  const [href, setHref] = useState('');\n  const [incompatibleBrowser, setIncompatibleBrowser] = useState(false);\n\n  useEffect(() => {\n    setHref(\n      window.location.origin + window.location.pathname + window.location.hash\n    );\n    dispatch(setNetworkNameAction(networkName));\n  }, [setHref, networkName, dispatch]);\n\n  useEffect(() => {\n    setIncompatibleBrowser(\n      !(\n        'RTCPeerConnection' in window &&\n        'WebSocket' in window &&\n        'FileReader' in window\n      )\n    );\n  }, []);\n\n  useEffect(() => {\n    const onPaste = (e: ClipboardEvent) => {\n      const element = e.target as HTMLElement;\n      if (element.tagName === 'TEXTAREA') {\n        return;\n      }\n\n      const files = [];\n      for (let item of e.clipboardData.items) {\n        const file = item.getAsFile();\n\n        if (file) {\n          files.push(file);\n        } else if (item.type === 'text/plain') {\n          item.getAsString(str => {\n            setClipboardFiles(files => [\n              ...files,\n              new File([str], 'clipboard.txt', { type: 'text/plain' }),\n            ]);\n          });\n        }\n      }\n\n      setClipboardFiles(files);\n    };\n\n    document.addEventListener('paste', onPaste);\n\n    return () => {\n      document.removeEventListener('paste', onPaste);\n    };\n  });\n\n  const dismissClipboard = useCallback(() => {\n    setClipboardFiles([]);\n  }, [setClipboardFiles]);\n\n  return (\n    <>\n      {incompatibleBrowser ? <IncompatibleBrowser /> : null}\n      <AnimatePresence>{!welcomed ? <WelcomeModal /> : null}</AnimatePresence>\n      <AnimatePresence>\n        {clipboardFiles.length > 0 ? (\n          <ClipboardModal\n            files={clipboardFiles}\n            dismissClipboard={dismissClipboard}\n          />\n        ) : null}\n      </AnimatePresence>\n      <section className=\"desktop-2col\">\n        <TransfersSection />\n        <QrCodeSection href={href} />\n      </section>\n    </>\n  );\n};\n\nexport default Transfers;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nimport { StateType } from '../reducers';\nimport { animationPropsOpacity } from '../animationSettings';\n\nconst Status: React.FC = () => {\n  const connected = useSelector((state: StateType) => state.connected);\n\n  return (\n    <AnimatePresence>\n      {!connected ? (\n        <motion.div {...animationPropsOpacity} className=\"status error\">\n          <div>Connecting...</div>\n        </motion.div>\n      ) : null}\n    </AnimatePresence>\n  );\n};\n\nexport default Status;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport 'rc-tooltip/assets/bootstrap_white.css';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Home from './screens/Home';\nimport Transfers from './screens/Transfers';\nimport Status from './components/Status';\nimport { Router } from './config';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<Router>\n\t\t\t<div className=\"app\">\n\t\t\t\t<Header />\n\t\t\t\t<Status />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/:networkName\">\n\t\t\t\t\t\t<Transfers />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<Home />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n","import { ActionModel, MessageModel } from '../types/Models';\nimport { ActionType } from '../types/ActionType';\n\nexport function sendMessageAction(message: MessageModel): ActionModel {\n  return {\n    type: ActionType.PREPARE_MESSAGE,\n    value: message,\n  };\n}\n\nexport function messageAction(message: MessageModel): ActionModel {\n  return {\n    type: ActionType.WS_MESSAGE,\n    value: message,\n  };\n}\n\nexport function connectedAction(): ActionModel {\n  return {\n    type: ActionType.WS_CONNECTED,\n    value: null,\n  };\n}\n\nexport function disconnectedAction(): ActionModel {\n  return {\n    type: ActionType.WS_DISCONNECTED,\n    value: null,\n  };\n}\n\nexport function connectAction(): ActionModel {\n  return {\n    type: ActionType.WS_CONNECT,\n    value: null,\n  };\n}\n","import { MiddlewareAPI } from 'redux';\nimport { TypeSocket } from 'typesocket';\n\nimport { ActionType } from './types/ActionType';\nimport { MessageModel } from './types/Models';\nimport {\n  connectedAction,\n  disconnectedAction,\n  messageAction,\n} from './actions/websocket';\n\nexport const socketMiddleware = (url: string) => {\n  return (store: MiddlewareAPI<any, any>) => {\n    const socket = new TypeSocket<MessageModel>(url, {\n      maxRetries: 0,\n      retryOnClose: true,\n      retryTime: 500,\n    });\n\n    socket.on('connected', () => store.dispatch(connectedAction()));\n    socket.on('disconnected', () => store.dispatch(disconnectedAction()));\n    socket.on('message', message => store.dispatch(messageAction(message)));\n\n    return (next: (action: any) => void) => (action: any) => {\n      if (action.type) {\n        if (\n          action.type === ActionType.WS_SEND_MESSAGE &&\n          socket.readyState === 1\n        ) {\n          socket.send(action.value);\n        }\n\n        if (action.type === ActionType.WS_CONNECT && socket.readyState === 0) {\n          socket.connect();\n        }\n      }\n\n      return next(action);\n    };\n  };\n};\n","import { Store } from 'redux';\nimport { RSA } from 'matcrypt';\n\nimport { ActionModel, TransferModel, ClientModel } from '../types/Models';\nimport { ActionType } from '../types/ActionType';\n\nexport interface StateType {\n\twelcomed: boolean;\n\tconnected: boolean;\n\trtcConfiguration: RTCConfiguration;\n\terror: string;\n\tnetworkName: string;\n\tclientId: string;\n\tclientColor: string;\n\tmaxSize: number;\n\tsuggestedName: string;\n\tnetwork: ClientModel[];\n\ttransfers: TransferModel[];\n\tpublicKey?: string;\n\tprivateKey?: string;\n\tnoticeText?: string;\n\tnoticeUrl?: string;\n}\n\nlet initialState: StateType = {\n\twelcomed: localStorage.getItem('welcomed') === '1',\n\tconnected: false,\n\trtcConfiguration: null,\n\terror: null,\n\tnetworkName: null,\n\tclientId: null,\n\tclientColor: null,\n\tsuggestedName: null,\n\tnetwork: [],\n\ttransfers: [],\n\tmaxSize: 0,\n};\n\nexport type StoreType = Store<StateType, ActionModel>;\n\nfunction applicationState(state = initialState, action: ActionModel) {\n\tconst newState = { ...state };\n\tswitch (action.type) {\n\t\tcase ActionType.SET_ERROR:\n\t\t\tnewState.error = action.value as string;\n\t\t\tbreak;\n\t\tcase ActionType.DISMISS_ERROR:\n\t\t\tnewState.error = null;\n\t\t\tbreak;\n\t\tcase ActionType.DISMISS_WELCOME:\n\t\t\tnewState.welcomed = true;\n\t\t\tbreak;\n\t\tcase ActionType.SET_CONNECTED:\n\t\t\tnewState.connected = action.value as boolean;\n\t\t\tbreak;\n\t\tcase ActionType.SET_RTC_CONFIGURATION:\n\t\t\tconst rtcConfiguration = action.value as RTCConfiguration;\n\n\t\t\t// If the server is allowed to set other properties it may result in a potential privacy breach.\n\t\t\t// TODO: add other properties if neccessary.\n\t\t\tif (rtcConfiguration.iceServers) {\n\t\t\t\tnewState.rtcConfiguration = {\n\t\t\t\t\ticeServers: rtcConfiguration.iceServers,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tnewState.rtcConfiguration = null;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ActionType.SET_NETWORK_NAME:\n\t\t\tnewState.networkName = action.value as string;\n\t\t\tbreak;\n\t\tcase ActionType.SET_CLIENT_ID:\n\t\t\tnewState.clientId = action.value as string;\n\t\t\tbreak;\n\t\tcase ActionType.SET_CLIENT_COLOR:\n\t\t\tnewState.clientColor = action.value as string;\n\t\t\tbreak;\n\t\tcase ActionType.SET_MAX_SIZE:\n\t\t\tnewState.maxSize = action.value as number;\n\t\t\tbreak;\n\t\tcase ActionType.SET_SUGGESTED_NAME:\n\t\t\tnewState.suggestedName = action.value as string;\n\t\t\tbreak;\n\t\tcase ActionType.SET_KEY_PAIR:\n\t\t\tconst keyPairValue = action.value as RSA.KeyPair;\n\t\t\tnewState.publicKey = keyPairValue.publicKey;\n\t\t\tnewState.privateKey = keyPairValue.privateKey;\n\t\t\tbreak;\n\t\tcase ActionType.SET_NETWORK:\n\t\t\tnewState.network = action.value as ClientModel[];\n\t\t\tnewState.network = newState.network.filter((client) => client.clientId !== newState.clientId);\n\n\t\t\t// Remove transfers from now offline clients.\n\t\t\tconst clientIds = newState.network.map((client) => client.clientId);\n\t\t\tnewState.transfers = newState.transfers.filter((transfer) =>\n\t\t\t\ttransfer.clientId ? clientIds.includes(transfer.clientId) : true\n\t\t\t);\n\t\t\tbreak;\n\t\tcase ActionType.SET_NOTICE:\n\t\t\tconst notice = action.value as {\n\t\t\t\tnoticeText?: string;\n\t\t\t\tnoticeUrl?: string;\n\t\t\t};\n\t\t\tnewState.noticeText = notice.noticeText;\n\t\t\tnewState.noticeUrl = notice.noticeUrl;\n\t\t\tbreak;\n\t\tcase ActionType.ADD_TRANSFER:\n\t\t\tnewState.transfers = [...newState.transfers, action.value];\n\t\t\tbreak;\n\t\tcase ActionType.REMOVE_TRANSFER:\n\t\t\tnewState.transfers = newState.transfers.filter((transfer) => transfer.transferId !== action.value);\n\t\t\tbreak;\n\t\tcase ActionType.SET_REMOTE_DESCRIPTION:\n\t\t\tnewState.transfers = newState.transfers.map((transfer) => {\n\t\t\t\tconst peerConnection = transfer.peerConnection;\n\t\t\t\tif (\n\t\t\t\t\ttransfer.transferId === action.value.transferId &&\n\t\t\t\t\tpeerConnection &&\n\t\t\t\t\tpeerConnection.connectionState !== 'disconnected' &&\n\t\t\t\t\tpeerConnection.connectionState !== 'failed'\n\t\t\t\t) {\n\t\t\t\t\ttransfer.peerConnection.setRemoteDescription(action.value.data).catch(() => {});\n\t\t\t\t}\n\t\t\t\treturn transfer;\n\t\t\t});\n\t\t\tbreak;\n\t\tcase ActionType.ADD_ICE_CANDIDATE:\n\t\t\tnewState.transfers = newState.transfers.map((transfer) => {\n\t\t\t\tconst peerConnection = transfer.peerConnection;\n\t\t\t\tif (\n\t\t\t\t\ttransfer.transferId === action.value.transferId &&\n\t\t\t\t\tpeerConnection &&\n\t\t\t\t\tpeerConnection.connectionState !== 'disconnected' &&\n\t\t\t\t\tpeerConnection.connectionState !== 'failed'\n\t\t\t\t) {\n\t\t\t\t\ttransfer.peerConnection.addIceCandidate(action.value.data).catch(() => {});\n\t\t\t\t}\n\t\t\t\treturn transfer;\n\t\t\t});\n\t\t\tbreak;\n\t\tcase ActionType.UPDATE_TRANSFER:\n\t\t\tnewState.transfers = newState.transfers.map((transfer) => {\n\t\t\t\tif (transfer.transferId === action.value.transferId) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...transfer,\n\t\t\t\t\t\t...action.value,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn transfer;\n\t\t\t});\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n\n\tnewState.transfers = newState.transfers.sort((a, b) => {\n\t\treturn b.state - a.state;\n\t});\n\n\treturn newState;\n}\n\nexport default applicationState;\n","export enum MessageType {\n\tWELCOME = 'welcome',\n\tNAME = 'name',\n\tTRANSFER = 'transfer',\n\tACTION = 'action',\n\tNETWORK = 'network',\n\tPING = 'ping',\n\tRTC_DESCRIPTION = 'rtcDescription',\n\tRTC_CANDIDATE = 'rtcCandidate',\n\tENCRYPTED = 'encrypted',\n}\n\nexport enum ActionMessageActionType {\n\tACCEPT = 'accept',\n\tREJECT = 'reject',\n\tCANCEL = 'cancel',\n}\n","import { put, select } from 'redux-saga/effects';\n\nimport {\n\tTransferModel,\n\tActionMessageModel,\n\tRTCDescriptionMessageModel,\n\tRTCCandidateMessageModel,\n} from '../types/Models';\nimport { StateType } from '../reducers';\nimport { TransferState } from '../types/TransferState';\nimport { updateTransferAction } from '../actions/transfers';\nimport { sendMessageAction } from '../actions/websocket';\nimport { MessageType } from '../types/MessageType';\n\nexport default function* transferSendFile(actionMessage: ActionMessageModel, dispatch: (action: any) => void) {\n\tyield put(\n\t\tupdateTransferAction({\n\t\t\ttransferId: actionMessage.transferId,\n\t\t\tstate: TransferState.CONNECTING,\n\t\t})\n\t);\n\n\tconst transfers: TransferModel[] = yield select((state: StateType) => state.transfers);\n\tconst filteredTransfers: TransferModel[] = transfers.filter(\n\t\t(transfer) => transfer.transferId === actionMessage.transferId\n\t);\n\tif (filteredTransfers.length === 0) return;\n\n\tconst transfer = filteredTransfers[0];\n\tif (!transfer || !transfer.file) return;\n\n\tconst file = transfer.file;\n\n\tconst rtcConfiguration = yield select((state: StateType) => state.rtcConfiguration);\n\tconst connection = new RTCPeerConnection(rtcConfiguration);\n\n\tyield put(\n\t\tupdateTransferAction({\n\t\t\ttransferId: transfer.transferId,\n\t\t\tpeerConnection: connection,\n\t\t})\n\t);\n\n\tconnection.addEventListener('negotiationneeded', async () => {\n\t\tconst offer = await connection.createOffer();\n\t\tawait connection.setLocalDescription(offer);\n\n\t\tconst nextRtcMessage: RTCDescriptionMessageModel = {\n\t\t\ttype: MessageType.RTC_DESCRIPTION,\n\t\t\ttransferId: transfer.transferId,\n\t\t\ttargetId: transfer.clientId,\n\t\t\tdata: {\n\t\t\t\ttype: connection.localDescription.type,\n\t\t\t\tsdp: connection.localDescription.sdp,\n\t\t\t},\n\t\t};\n\n\t\tdispatch(sendMessageAction(nextRtcMessage));\n\t});\n\n\tconnection.addEventListener('icecandidate', (e) => {\n\t\tif (!e || !e.candidate) return;\n\n\t\tconst candidateMessage: RTCCandidateMessageModel = {\n\t\t\ttype: MessageType.RTC_CANDIDATE,\n\t\t\ttargetId: transfer.clientId,\n\t\t\ttransferId: transfer.transferId,\n\t\t\tdata: e.candidate,\n\t\t};\n\n\t\tdispatch(sendMessageAction(candidateMessage));\n\t});\n\n\tconst channel = connection.createDataChannel('sendDataChannel');\n\tchannel.binaryType = 'arraybuffer';\n\n\tconst timestamp = new Date().getTime() / 1000;\n\n\tlet complete = false;\n\tconst onFailure = () => {\n\t\tcomplete = true;\n\n\t\tdispatch(\n\t\t\tupdateTransferAction({\n\t\t\t\ttransferId: transfer.transferId,\n\t\t\t\tstate: TransferState.FAILED,\n\t\t\t\tprogress: 1,\n\t\t\t\tspeed: 0,\n\t\t\t})\n\t\t);\n\t};\n\n\tconst bufferSize = connection.sctp?.maxMessageSize || 65535;\n\n\tchannel.addEventListener('open', () => {\n\t\tdispatch(\n\t\t\tupdateTransferAction({\n\t\t\t\ttransferId: transfer.transferId,\n\t\t\t\tstate: TransferState.CONNECTED,\n\t\t\t})\n\t\t);\n\n\t\tconst fileReader = new FileReader();\n\t\tlet offset = 0;\n\n\t\tconst nextSlice = (currentOffset: number) => {\n\t\t\tconst slice = file.slice(offset, currentOffset + bufferSize);\n\t\t\tfileReader.readAsArrayBuffer(slice);\n\t\t};\n\n\t\tfileReader.addEventListener('load', (e) => {\n\t\t\tif (complete) return;\n\n\t\t\tconst buffer = e.target.result as ArrayBuffer;\n\n\t\t\ttry {\n\t\t\t\tchannel.send(buffer);\n\t\t\t} catch {\n\t\t\t\tonFailure();\n\t\t\t\tchannel.close();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toffset += buffer.byteLength;\n\n\t\t\tdispatch(\n\t\t\t\tupdateTransferAction({\n\t\t\t\t\ttransferId: transfer.transferId,\n\t\t\t\t\tstate: TransferState.IN_PROGRESS,\n\t\t\t\t\tprogress: offset / file.size,\n\t\t\t\t\tspeed: offset / (new Date().getTime() / 1000 - timestamp),\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tif (offset >= file.size) {\n\t\t\t\tdispatch(\n\t\t\t\t\tupdateTransferAction({\n\t\t\t\t\t\ttransferId: transfer.transferId,\n\t\t\t\t\t\tstate: TransferState.COMPLETE,\n\t\t\t\t\t\tprogress: 1,\n\t\t\t\t\t\tspeed: 0,\n\t\t\t\t\t\ttime: Math.floor(new Date().getTime() / 1000 - timestamp),\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\t\tcomplete = true;\n\t\t\t\t// Reminder: Uncomment the next line only if there are issues with transfers getting stuck at 100%.\n\t\t\t\t// channel.close();\n\t\t\t} else if (channel.bufferedAmount < bufferSize / 2) {\n\t\t\t\tnextSlice(offset);\n\t\t\t}\n\t\t});\n\n\t\tchannel.bufferedAmountLowThreshold = bufferSize / 2;\n\t\tchannel.addEventListener('bufferedamountlow', () => nextSlice(offset));\n\n\t\tnextSlice(0);\n\t});\n\n\tchannel.addEventListener('close', () => {\n\t\tif (!complete) {\n\t\t\tonFailure();\n\t\t}\n\n\t\tconnection.close();\n\t});\n\n\tconnection.addEventListener('iceconnectionstatechange', () => {\n\t\tif (\n\t\t\t(connection.iceConnectionState === 'failed' || connection.iceConnectionState === 'disconnected') &&\n\t\t\t!complete\n\t\t) {\n\t\t\tonFailure();\n\t\t}\n\t});\n}\n","import { put, select, call } from 'redux-saga/effects';\n\nimport {\n  TransferModel,\n  RTCDescriptionMessageModel,\n  RTCCandidateMessageModel,\n} from '../types/Models';\nimport { StateType } from '../reducers';\nimport { TransferState } from '../types/TransferState';\nimport { updateTransferAction } from '../actions/transfers';\nimport { sendMessageAction } from '../actions/websocket';\nimport { MessageType } from '../types/MessageType';\n\nexport default function* transferReceiveFile(\n  rtcMessage: RTCDescriptionMessageModel,\n  dispatch: (action: any) => void\n) {\n  const transfers: TransferModel[] = yield select(\n    (state: StateType) => state.transfers\n  );\n  const filteredTransfers: TransferModel[] = transfers.filter(\n    transfer => transfer.transferId === rtcMessage.transferId\n  );\n  if (filteredTransfers.length === 0) return;\n\n  const transfer = filteredTransfers[0];\n  if (!transfer) return;\n\n  const rtcConfiguration = yield select(\n    (state: StateType) => state.rtcConfiguration\n  );\n  const connection = new RTCPeerConnection(rtcConfiguration);\n\n  yield put(\n    updateTransferAction({\n      transferId: transfer.transferId,\n      peerConnection: connection,\n    })\n  );\n\n  connection.addEventListener('icecandidate', e => {\n    if (!e || !e.candidate) return;\n\n    const candidateMessage: RTCCandidateMessageModel = {\n      type: MessageType.RTC_CANDIDATE,\n      targetId: transfer.clientId,\n      transferId: transfer.transferId,\n      data: e.candidate,\n    };\n\n    dispatch(sendMessageAction(candidateMessage));\n  });\n\n  const timestamp = new Date().getTime() / 1000;\n  const buffer: BlobPart[] = [];\n  let offset = 0;\n\n  let complete = false;\n  const onFailure = () => {\n    complete = true;\n\n    dispatch(\n      updateTransferAction({\n        transferId: transfer.transferId,\n        state: TransferState.FAILED,\n        progress: 1,\n        speed: 0,\n      })\n    );\n  };\n\n  const onComplete = () => {\n    complete = true;\n\n    const blob = new Blob(buffer);\n    const blobUrl = URL.createObjectURL(blob);\n\n    dispatch(\n      updateTransferAction({\n        transferId: transfer.transferId,\n        state: TransferState.COMPLETE,\n        progress: 1,\n        speed: 0,\n        time: Math.floor(new Date().getTime() / 1000 - timestamp),\n        blobUrl: blobUrl,\n      })\n    );\n\n    const element = document.createElement('a');\n    element.setAttribute('href', blobUrl);\n    element.setAttribute('download', transfer.fileName);\n\n    element.style.display = 'none';\n    element.click();\n\n    connection.close();\n  };\n\n  connection.addEventListener('datachannel', event => {\n    dispatch(\n      updateTransferAction({\n        transferId: transfer.transferId,\n        state: TransferState.CONNECTED,\n      })\n    );\n\n    const channel = event.channel;\n\n    channel.binaryType = 'arraybuffer';\n    channel.addEventListener('message', event => {\n      buffer.push(event.data);\n      offset += event.data.byteLength;\n\n      dispatch(\n        updateTransferAction({\n          transferId: transfer.transferId,\n          state: TransferState.IN_PROGRESS,\n          progress: offset / transfer.fileSize,\n          speed: offset / (new Date().getTime() / 1000 - timestamp),\n        })\n      );\n\n      if (offset >= transfer.fileSize) {\n        onComplete();\n        channel.close();\n      }\n    });\n\n    channel.addEventListener('close', () => {\n      if (offset < transfer.fileSize) {\n        onFailure();\n      } else if (!complete) {\n        onComplete();\n      }\n    });\n  });\n\n  connection.addEventListener('iceconnectionstatechange', () => {\n    if (\n      (connection.iceConnectionState === 'failed' ||\n        connection.iceConnectionState === 'disconnected') &&\n      !complete\n    ) {\n      onFailure();\n    }\n  });\n\n  yield call(\n    async () => await connection.setRemoteDescription(rtcMessage.data)\n  );\n\n  const answer = yield call(async () => await connection.createAnswer());\n  yield call(async () => await connection.setLocalDescription(answer));\n\n  const nextRtcMessage: RTCDescriptionMessageModel = {\n    type: MessageType.RTC_DESCRIPTION,\n    transferId: transfer.transferId,\n    targetId: transfer.clientId,\n    data: {\n      type: connection.localDescription.type,\n      sdp: connection.localDescription.sdp,\n    },\n  };\n\n  yield put(sendMessageAction(nextRtcMessage));\n}\n","import { put, takeEvery, select, call } from 'redux-saga/effects';\nimport { v4 as uuid } from 'uuid';\nimport { fromImage } from 'imtool';\nimport { RSA } from 'matcrypt';\n\nimport {\n\tActionModel,\n\tTransferModel,\n\tTransferMessageModel,\n\tNameMessageModel,\n\tActionMessageModel,\n\tPingMessageModel,\n\tMessage,\n\tClientModel,\n\tEncryptedMessageModel,\n} from '../types/Models';\nimport { ActionType } from '../types/ActionType';\nimport { StateType } from '../reducers';\nimport transferSendFile from './transferSendFile';\nimport transferReceiveFile from './transferReceiveFile';\nimport { TransferState } from '../types/TransferState';\nimport {\n\tsetRemoteDescriptionAction,\n\tremoveTransferAction,\n\tupdateTransferAction,\n\taddTransferAction,\n\taddIceCandidateAction,\n} from '../actions/transfers';\nimport { connectAction, messageAction, sendMessageAction } from '../actions/websocket';\nimport {\n\tsetNetworkAction,\n\tsetRtcConfigurationAction,\n\tsetSuggestedNameAction,\n\tsetClientIdAction,\n\tsetClientColorAction,\n\tsetConnectedAction,\n\tsetMaxSizeAction,\n\tsetNoticeAction,\n\tsetKeyPairAction,\n\tsetNetworkNameAction,\n} from '../actions/state';\nimport { MessageType, ActionMessageActionType } from '../types/MessageType';\n\nfunction* message(action: ActionModel, dispatch: (action: any) => void) {\n\tconst msg: Message = action.value as Message;\n\n\tswitch (msg.type) {\n\t\tcase MessageType.WELCOME:\n\t\t\tyield put(setRtcConfigurationAction(msg.rtcConfiguration));\n\t\t\tyield put(setSuggestedNameAction(msg.suggestedName));\n\t\t\tyield put(setClientIdAction(msg.clientId));\n\t\t\tyield put(setClientColorAction(msg.clientColor));\n\t\t\tyield put(setMaxSizeAction(msg.maxSize));\n\t\t\tyield put(setNoticeAction(msg.noticeText, msg.noticeUrl));\n\n\t\t\tconst networkName = yield select((state: StateType) => state.networkName);\n\n\t\t\tif (networkName && networkName !== '') {\n\t\t\t\tyield put(setNetworkNameAction(networkName));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase MessageType.TRANSFER:\n\t\t\tconst transfer: TransferModel = {\n\t\t\t\tfileName: msg.fileName,\n\t\t\t\tfileType: msg.fileType,\n\t\t\t\tfileSize: msg.fileSize,\n\t\t\t\ttransferId: msg.transferId,\n\t\t\t\tclientId: msg.clientId,\n\t\t\t\tstate: TransferState.INCOMING,\n\t\t\t\tpreview: msg.preview?.startsWith('data:') ? msg.preview : undefined,\n\t\t\t\treceiving: true,\n\t\t\t};\n\n\t\t\tyield put(addTransferAction(transfer));\n\t\t\tbreak;\n\t\tcase MessageType.ACTION:\n\t\t\tswitch (msg.action) {\n\t\t\t\tcase ActionMessageActionType.CANCEL:\n\t\t\t\tcase ActionMessageActionType.REJECT:\n\t\t\t\t\tyield put(removeTransferAction(msg.transferId));\n\t\t\t\t\tbreak;\n\t\t\t\tcase ActionMessageActionType.ACCEPT:\n\t\t\t\t\tyield call(() => transferSendFile(msg, dispatch));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase MessageType.NETWORK:\n\t\t\tyield put(setNetworkAction(msg.clients));\n\t\t\tbreak;\n\t\tcase MessageType.PING:\n\t\t\tconst pongMessage: PingMessageModel = {\n\t\t\t\ttype: MessageType.PING,\n\t\t\t\ttimestamp: new Date().getTime(),\n\t\t\t};\n\t\t\tyield put(sendMessageAction(pongMessage));\n\t\t\tbreak;\n\t\tcase MessageType.RTC_DESCRIPTION:\n\t\t\tif (msg.data.type === 'answer') {\n\t\t\t\tyield put(setRemoteDescriptionAction(msg.transferId, msg.data));\n\t\t\t} else {\n\t\t\t\tyield call(() => transferReceiveFile(msg, dispatch));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase MessageType.RTC_CANDIDATE:\n\t\t\tyield put(addIceCandidateAction(msg.transferId, msg.data));\n\t\t\tbreak;\n\t\tcase MessageType.ENCRYPTED:\n\t\t\tconst privateKey = yield select((state: StateType) => state.privateKey);\n\t\t\tif (privateKey) {\n\t\t\t\ttry {\n\t\t\t\t\tconst json = JSON.parse(yield call(async () => await RSA.decryptString(privateKey, msg.payload)));\n\n\t\t\t\t\tif (json && json.type) {\n\t\t\t\t\t\tif (msg.clientId) {\n\t\t\t\t\t\t\tjson.clientId = msg.clientId;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tyield put(messageAction(json));\n\t\t\t\t\t}\n\t\t\t\t} catch {}\n\t\t\t}\n\t\t\tbreak;\n\t}\n}\n\nfunction* prepareMessage(action: ActionModel) {\n\tconst msg = action.value as Message;\n\tconst secure = !!msg.secure;\n\tdelete msg['secure'];\n\n\tif ('targetId' in msg) {\n\t\tconst network: ClientModel[] = yield select((state: StateType) => state.network);\n\t\tconst target = network?.find((client) => client.clientId === msg.targetId);\n\t\tif (target && target.publicKey) {\n\t\t\ttry {\n\t\t\t\tconst payload: string = yield call(\n\t\t\t\t\tasync () => await RSA.encryptString(target.publicKey, JSON.stringify(msg))\n\t\t\t\t);\n\n\t\t\t\tconst message: EncryptedMessageModel = {\n\t\t\t\t\ttype: MessageType.ENCRYPTED,\n\t\t\t\t\ttargetId: msg.targetId,\n\t\t\t\t\tpayload,\n\t\t\t\t};\n\n\t\t\t\tyield put({\n\t\t\t\t\ttype: ActionType.WS_SEND_MESSAGE,\n\t\t\t\t\tvalue: message,\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t} catch {}\n\t\t}\n\t}\n\n\tif (secure) {\n\t\treturn;\n\t}\n\n\tyield put({\n\t\ttype: ActionType.WS_SEND_MESSAGE,\n\t\tvalue: msg,\n\t});\n}\n\nfunction* connected() {\n\tyield put(setConnectedAction(true));\n}\n\nfunction* setName(action: ActionModel) {\n\tconst publicKey = yield select((state: StateType) => state.publicKey);\n\n\tconst message: NameMessageModel = {\n\t\ttype: MessageType.NAME,\n\t\tnetworkName: action.value,\n\t\tpublicKey,\n\t};\n\n\tyield put(sendMessageAction(message));\n}\n\nfunction* disconnected() {\n\tyield put(setConnectedAction(false));\n}\n\nfunction* createTransfer(action: ActionModel) {\n\tconst file: File = action.value.file;\n\n\tlet preview: string | undefined = undefined;\n\n\tif (file.type.startsWith('image/')) {\n\t\tconst maxSize = yield select((state: StateType) => state.maxSize);\n\t\tpreview = yield call(async () => {\n\t\t\ttry {\n\t\t\t\tconst imtool = await fromImage(file);\n\t\t\t\timtool.thumbnail(100, true);\n\n\t\t\t\tconst url = await imtool.toDataURL();\n\t\t\t\t// Ensure the URL isn't too long.\n\t\t\t\tif (url.length < maxSize * 0.75) {\n\t\t\t\t\treturn url;\n\t\t\t\t}\n\t\t\t} catch {}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tconst transfer: TransferModel = {\n\t\tfile: file,\n\t\tfileName: file.name,\n\t\tfileSize: file.size,\n\t\tfileType: file.type || 'application/octet-stream', // fileType is required by the server.\n\t\ttransferId: uuid(),\n\t\tclientId: action.value.clientId,\n\t\tstate: TransferState.OUTGOING,\n\t\treceiving: false,\n\t\tpreview,\n\t};\n\n\tyield put(addTransferAction(transfer));\n\n\tconst model: TransferMessageModel = {\n\t\ttype: MessageType.TRANSFER,\n\t\ttransferId: transfer.transferId,\n\t\tfileName: transfer.fileName,\n\t\tfileSize: transfer.fileSize,\n\t\tfileType: transfer.fileType,\n\t\ttargetId: transfer.clientId,\n\t\tpreview,\n\t};\n\n\tyield put(sendMessageAction(model));\n}\n\nfunction* cancelTransfer(action: ActionModel) {\n\tconst transfers: TransferModel[] = yield select((state: StateType) => state.transfers);\n\tconst filteredTransfers: TransferModel[] = transfers.filter((transfer) => transfer.transferId === action.value);\n\tif (filteredTransfers.length === 0) return;\n\n\tconst transfer = filteredTransfers[0];\n\tif (!transfer) return;\n\n\tif (transfer.peerConnection) {\n\t\ttry {\n\t\t\ttransfer.peerConnection.close();\n\t\t} catch {}\n\t}\n\n\tconst model: ActionMessageModel = {\n\t\ttype: MessageType.ACTION,\n\t\ttransferId: transfer.transferId,\n\t\ttargetId: transfer.clientId,\n\t\taction: ActionMessageActionType.CANCEL,\n\t};\n\n\tyield put(sendMessageAction(model));\n\tyield put(removeTransferAction(action.value));\n}\n\nfunction* acceptTransfer(action: ActionModel) {\n\tconst transfers: TransferModel[] = yield select((state: StateType) => state.transfers);\n\tconst filteredTransfers: TransferModel[] = transfers.filter(\n\t\t(transfer) => transfer.state === TransferState.INCOMING && transfer.transferId === action.value\n\t);\n\tif (filteredTransfers.length === 0) return;\n\n\tconst transfer = filteredTransfers[0];\n\tif (!transfer) return;\n\n\tconst model: ActionMessageModel = {\n\t\ttype: MessageType.ACTION,\n\t\ttransferId: transfer.transferId,\n\t\ttargetId: transfer.clientId,\n\t\taction: ActionMessageActionType.ACCEPT,\n\t};\n\n\tyield put(sendMessageAction(model));\n\tyield put(\n\t\tupdateTransferAction({\n\t\t\ttransferId: action.value,\n\t\t\tstate: TransferState.CONNECTING,\n\t\t})\n\t);\n}\n\nfunction* rejectTransfer(action: ActionModel) {\n\tconst transfers: TransferModel[] = yield select((state: StateType) => state.transfers);\n\tconst filteredTransfers: TransferModel[] = transfers.filter(\n\t\t(transfer) => transfer.state === TransferState.INCOMING && transfer.transferId === action.value\n\t);\n\tif (filteredTransfers.length === 0) return;\n\n\tconst transfer = filteredTransfers[0];\n\tif (!transfer) return;\n\n\tconst model: ActionMessageModel = {\n\t\ttype: MessageType.ACTION,\n\t\ttransferId: transfer.transferId,\n\t\ttargetId: transfer.clientId,\n\t\taction: ActionMessageActionType.REJECT,\n\t};\n\n\tyield put(sendMessageAction(model));\n\tyield put(removeTransferAction(action.value));\n}\n\n/**\n * Called after the welcome screen is dismissed.\n */\nfunction* welcomed() {\n\tyield call(() => localStorage.setItem('welcomed', '1'));\n}\n\nfunction* updateNotificationCount() {\n\tconst transfers: TransferModel[] = yield select((state: StateType) => state.transfers);\n\tconst incomingTransfers: TransferModel[] = transfers.filter(\n\t\t(transfer) => transfer.state === TransferState.INCOMING\n\t);\n\n\tif (incomingTransfers.length > 0) {\n\t\tdocument.title = '(' + incomingTransfers.length + ') OpenDrop';\n\t} else {\n\t\tdocument.title = 'OpenDrop';\n\t}\n}\n\nfunction* createKeys() {\n\t// Generate keys.\n\tconst keyPair: RSA.KeyPair | undefined = yield call(async () => {\n\t\ttry {\n\t\t\treturn await RSA.randomKeyPair();\n\t\t} catch {\n\t\t\t// In case of failure we default to plaintext communication.\n\t\t\treturn undefined;\n\t\t}\n\t});\n\n\tif (keyPair) {\n\t\tyield put(setKeyPairAction(keyPair.publicKey, keyPair.privateKey));\n\t}\n\n\tyield put(connectAction());\n}\n\nexport default function* root(dispatch: (action: any) => void) {\n\tyield call(() => createKeys());\n\n\tyield takeEvery(ActionType.DISMISS_WELCOME, welcomed);\n\n\tyield takeEvery(ActionType.WS_MESSAGE, function* (action: ActionModel) {\n\t\t// TODO: rewrite this to avoid passing dispatch\n\t\tyield call(() => message(action, dispatch));\n\t});\n\tyield takeEvery(ActionType.PREPARE_MESSAGE, prepareMessage);\n\tyield takeEvery(ActionType.WS_CONNECTED, connected);\n\tyield takeEvery(ActionType.WS_DISCONNECTED, disconnected);\n\n\tyield takeEvery(ActionType.SET_NETWORK_NAME, setName);\n\n\tyield takeEvery(ActionType.CREATE_TRANSFER, createTransfer);\n\tyield takeEvery(ActionType.CANCEL_TRANSFER, cancelTransfer);\n\n\tyield takeEvery(ActionType.ACCEPT_TRANSFER, acceptTransfer);\n\tyield takeEvery(ActionType.REJECT_TRANSFER, rejectTransfer);\n\n\tyield takeEvery(\n\t\t[ActionType.ADD_TRANSFER, ActionType.UPDATE_TRANSFER, ActionType.REMOVE_TRANSFER, ActionType.SET_NETWORK],\n\t\tupdateNotificationCount\n\t);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { socketMiddleware } from './socketMiddleware';\nimport reducers, { StoreType } from './reducers';\nimport sagas from './sagas';\nimport { wsServer } from './config';\n\nconst newStore = (): StoreType => {\n\tconst sagaMiddleware = createSagaMiddleware();\n\tconst store = createStore(reducers, applyMiddleware(socketMiddleware(wsServer), sagaMiddleware));\n\n\tsagaMiddleware.run(sagas, store.dispatch);\n\n\treturn store;\n};\n\nexport default newStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport createStore from './store';\n\nconst store = createStore();\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}